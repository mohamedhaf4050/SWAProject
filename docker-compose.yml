x-logging: &default-logging
  driver: loki
  options:
    loki-url: 'http://localhost:3100/api/prom/push'
    loki-pipeline-stages: |
      - multiline:
          firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
          max_wait_time: 3s
      - regex:
          expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

version: "3.4"

services:
  loki:
    image: grafana/loki:2.8.2
    command: -config.file=/etc/loki/local-config.yaml
    ports:
      - "3100:3100"


  prometheus:
    image: prom/prometheus:v2.45.0
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus:/workspace
    command:
      - --config.file=/workspace/prometheus.yml
      - --enable-feature=exemplar-storage
    depends_on:
      - loki
    logging: *default-logging

  tempo:
    image: grafana/tempo:2.1.1
    command: [ "--target=all", "--storage.trace.backend=local", "--storage.trace.local.path=/var/tempo", "--auth.enabled=false" ]
    ports:
      - "14250:14250"
    depends_on:
      - loki
    logging: *default-logging

  grafana:
    image: grafana/grafana:9.4.13
    ports:
      - "3000:3000"
    volumes:
      - ./etc/grafana/:/etc/grafana/provisioning/datasources
      - ./etc/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ./etc/dashboards:/etc/grafana/dashboards
    depends_on:
      - loki
      - prometheus
    environment:
      GF_AUTH_ANONYMOUS_ENABLED: "true"
      GF_AUTH_ANONYMOUS_ORG_ROLE: "Admin"
      GF_AUTH_DISABLE_LOGIN_FORM: "true"
    logging: *default-logging
  
  kafka:
    image: docker.io/bitnami/kafka:3.4
    ports:
      - "9092:9092"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      # - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092
    healthcheck:
          test: ["CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list"]
          interval: 10s
          timeout: 10s
          retries: 5
  

# Use root/example as user/password credentials
  mongo:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    ports:
    - '27017:27017'
    volumes:
      - mongodb_data:/data/db

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  app-a:
      build:
        context: .
        dockerfile: DockerFile_appProfile
      ports:
        - "8002:8000"
      environment:
        - KAFKA_BOOTSTRAP_SERVERS=swaproject-kafka-1:9092
        - DB_VERSION=3.8
        - MONGO_HOST=mongo:27017
        - APP_NAME= "app-a"
      logging: *default-logging
      depends_on:
            kafka:
              condition: service_healthy


      
  app-b:
      build:
        context: .
        dockerfile: DockerFile_appModule
      ports:
        - "8001:8000"
      environment:
        - KAFKA_BOOTSTRAP_SERVERS=swaproject-kafka-1:9092
        - DB_VERSION=3.8
        - MONGO_HOST=mongo:27017
        - APP_NAME= "app-b"
      logging: *default-logging
      depends_on:
            kafka:
              condition: service_healthy
volumes:
  mongodb_data:


